- name: Execute version-specific PowerShell script on Windows
  hosts: all
  gather_facts: yes

  tasks:
    - name: Ping Windows host
      win_ping:
      when: ansible_facts['os_family'] == "Windows"

    - name: Determine Windows version
      set_fact:
        win_version: "{{ ansible_facts['distribution'] }}"
      when: ansible_facts['os_family'] == "Windows"

    - name: Select PowerShell script based on Windows version
      set_fact:
        win_script: >-
          {% if '2012' in win_version %}
            windowspasswordexpiry2012.ps1
          {% elif '2016' in win_version %}
            windowspasswordexpiry2016.ps1
          {% elif '2019' in win_version %}
            windowspasswordexpiry2019.ps1
          {% else %}
            windowspasswordexpiry.ps1
          {% endif %}
      when: ansible_facts['os_family'] == "Windows"

    - name: Copy version-specific PowerShell script
      win_copy:
        src: "{{ win_script | trim}}"
        dest: "C:\\Users\\Administrator\\Desktop\\{{ win_script | trim }}"
      when: ansible_facts['os_family'] == "Windows"

    - name: Run the PowerShell script
      win_shell: "C:\\Users\\Administrator\\Desktop\\{{ win_script | trim }} -smtpUser '{{ smtp_user }}' -smtpPassword '{{ smtp_password }}'"
      register: script_result
      when: ansible_facts['os_family'] == "Windows"

    - name: Display script output
      debug:
        msg: "{{ script_result.stdout_lines }}"
      when: ansible_facts['os_family'] == "Windows"

    # Linux Tasks
- name: Ping Linux host
  ping:
  when: ansible_facts['os_family'] != "Windows"

- name: Determine Linux distribution
  set_fact:
    linux_distribution: "{{ ansible_facts['distribution'] | lower }}"
  when: ansible_facts['os_family'] != "Windows"

- name: Copy Linux script to target host
  copy:
    src: "linuxpass.sh"
    dest: "/tmp/linuxpass.sh"
    mode: '0755'
  when: ansible_facts['os_family'] != "Windows"

- name: Run password expiry script as pp_automation_user
  shell: "/tmp/linuxpass.sh -smtpUser '{{ smtp_user }}' -smtpPassword '{{ smtp_password }}'"
  become: true
  become_user: pp_automation_user
  register: linux_script_result
  when: ansible_facts['os_family'] != "Windows"

- name: Display script output
  debug:
    msg: "{{ linux_script_result.stdout_lines }}"
  when: ansible_facts['os_family'] != "Windows"

- name: Clean up temporary script
  file:
    path: "/tmp/linuxpass.sh"
    state: absent
  when: ansible_facts['os_family'] != "Windows"
